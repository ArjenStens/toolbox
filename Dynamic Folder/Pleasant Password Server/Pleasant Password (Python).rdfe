{"Name":"Dynamic Folder Export","Objects":[{"Type":"DynamicFolder","Name":"Pleasant Password (Python)","Notes":"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n\t<head>\r\n\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><title>\r\n\t\t</title>\r\n\t\t<style type=\"text/css\">\r\n\t\t\t.cs2654AE3A{text-align:left;text-indent:0pt;margin:0pt 0pt 0pt 0pt}\r\n\t\t\t.csE8BD414E{color:#000000;background-color:transparent;font-family:'Times New Roman';font-size:18pt;font-weight:bold;font-style:normal;}\r\n\t\t\t.csAD7A2888{text-align:left;text-indent:0pt;margin:12pt 0pt 12pt 0pt}\r\n\t\t\t.cs102784{color:#000000;background-color:transparent;font-family:'Times New Roman';font-size:12pt;font-weight:bold;font-style:normal;}\r\n\t\t\t.cs23FB0664{color:#000000;background-color:transparent;font-family:'Times New Roman';font-size:12pt;font-weight:normal;font-style:normal;}\r\n\t\t\t.cs17BF9202{color:#000000;background-color:transparent;font-family:'Times New Roman';font-size:13.5pt;font-weight:bold;font-style:normal;}\r\n\t\t\t.cs37063928{text-align:left;margin:0pt 0pt 0pt 0pt;list-style-type:disc;color:#000000;background-color:transparent;font-family:Arial;font-size:12pt;font-weight:normal;font-style:normal}\r\n\t\t\t.csD95D4409{text-align:left;margin:0pt 0pt 0pt 0pt;list-style-type:circle;color:#000000;background-color:transparent;font-family:'Courier New';font-size:12pt;font-weight:normal;font-style:normal}\r\n\t\t</style>\r\n\t</head>\r\n\t<body>\r\n\t\t<h2 class=\"cs2654AE3A\">\r\n\t\t\t<span class=\"csE8BD414E\">Dynamic Folder sample for Pleasant Password&nbsp;Server</span></h2>\r\n\t\t<p class=\"csAD7A2888\"><span class=\"cs102784\">Version</span><span class=\"cs23FB0664\">: 1.2<br/></span><span class=\"cs102784\">Author</span><span class=\"cs23FB0664\">: Royal Applications</span></p><p class=\"csAD7A2888\"><span class=\"cs23FB0664\">This Dynamic Folder sample for Pleasant Password&nbsp;Server supports Dynamic Credentials and Multi-Factor-Authentication (MFA), APIv4, APIv5. Suppors Python 2 and Python 3.</span></p><h3 class=\"cs2654AE3A\">\r\n\t\t\t<span class=\"cs17BF9202\">Requirements</span></h3>\r\n\t\t<ul style=\"margin-top:0;margin-bottom:0;\">\r\n\t\t\t<li class=\"cs37063928\"><span class=\"cs23FB0664\">Python Module: __future__</span></li><li class=\"cs37063928\"><span class=\"cs23FB0664\">Python Module: sys</span></li><li class=\"cs37063928\"><span class=\"cs23FB0664\">Python Module: functools</span></li><li class=\"cs37063928\"><span class=\"cs23FB0664\">Python Module: json</span></li><li class=\"cs37063928\"><span class=\"cs23FB0664\">Python Module: requests</span></li><li class=\"cs37063928\"><span class=\"cs23FB0664\">Python Module:&nbsp;urllib3</span></li><li class=\"cs37063928\"><span class=\"cs23FB0664\">Python Module: tkinter</span></li></ul>\r\n\t\t<h3 class=\"cs2654AE3A\">\r\n\t\t\t<span class=\"cs17BF9202\">Setup</span></h3>\r\n\t\t<ul style=\"margin-top:0;margin-bottom:0;\">\r\n\t\t\t<li class=\"cs37063928\"><span class=\"cs23FB0664\">Enter your &quot;Server URL&quot; in the &quot;Custom Properties&quot; section (without last slash).</span></li><li class=\"cs37063928\"><span class=\"cs23FB0664\">Enter your &quot;API Version&quot; in the &quot;Custom Properties&quot; section (defaults to APIv5).</span><ul style=\"margin-top:0;margin-bottom:0;\">\r\n\t\t\t\t<li class=\"csD95D4409\"><span class=\"cs23FB0664\">Supported version: APIv4, APIv5</span></li></ul>\r\n\t\t\t</li><li class=\"cs37063928\"><span class=\"cs23FB0664\">Choose whether you want to omit domain name from credentials in the &quot;Custom Properties&quot; section.</span></li><li class=\"cs37063928\"><span class=\"cs23FB0664\">Enter or assign your Pleasant Password&nbsp;Server&nbsp;credentials.</span></li></ul>\r\n\t</body>\r\n</html>\r\n","CustomProperties":[{"Name":"Server URL","Type":"URL","Value":"TODO"},{"Name":"API Version","Type":"Text","Value":"5"},{"Name":"Omit Domain","Type":"YesNo","Value":"False"}],"ScriptInterpreter":"python","DynamicCredentialScriptInterpreter":"python","DynamicCredentialScript":"from __future__ import print_function\r\nimport sys\r\nfrom functools import partial\r\nimport json\r\nimport requests\r\nimport urllib3\r\n\r\ntry:\r\n    # for Python2\r\n    from Tkinter import * \r\nexcept ImportError:\r\n    # for Python3\r\n    from tkinter import *\r\n\r\nclass TakeInput(object):\r\n    def __init__(self, request_message):\r\n        self.root = Tk()\r\n\r\n        self.root.title('')\r\n        self.string = ''\r\n\r\n        self.frame = Frame(self.root)\r\n        self.frame.pack()\r\n\r\n        self.acceptInput(request_message)\r\n\r\n    def acceptInput(self, request_message):\r\n        r = self.frame\r\n\r\n        k = Label(r, text=request_message)\r\n        k.pack(side='left')\r\n        self.e = Entry(r, text='Name')\r\n        self.e.pack(side='left')\r\n        self.e.focus_set()\r\n        b = Button(r, text='OK', command=self.gettext)\r\n        b.pack(side='right')\r\n\r\n    def gettext(self):\r\n        self.string = self.e.get()\r\n        self.root.destroy()\r\n\r\n    def getString(self):\r\n        return self.string\r\n\r\n    def waitForInput(self):\r\n        self.root.lift()\r\n        self.root.attributes('-topmost', True)\r\n        self.root.after_idle(self.root.attributes, '-topmost', False)\r\n\r\n        self.root.mainloop()\r\n\r\n\r\ndef show_prompt(request_message):\r\n    msg_box = TakeInput(request_message)\r\n\r\n    # loop until the user makes a decision and the window is destroyed\r\n\r\n    msg_box.waitForInput()\r\n\r\n    return msg_box.getString()\r\n\r\n\r\ndef call_token_endpoint(url, body, otp_headers):\r\n    token_json = requests.post(url + \"/OAuth2/Token\", data=body, verify=False, headers=otp_headers)\r\n\r\n    return token_json\r\n\r\ndef get_api_string(version):\r\n    api_string_list = {\r\n        \"4\": \"/api/v4/rest/credential/\",\r\n        \"5\": \"/api/v5/rest/entries/\"\r\n    }\r\n    api_string = api_string_list.get(version, \"/api/v5/rest/entries\")\r\n\r\n    return api_string\r\n\r\ndef get_dynamic_credential(url, username, password, credential_id):\r\n    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\r\n\r\n    token_params = {\r\n        \"grant_type\": \"password\",\r\n        \"username\": username,\r\n        \"password\": password\r\n    }\r\n\r\n    token_json = call_token_endpoint(url, token_params, None)\r\n\r\n    if not token_json.ok:\r\n        if \"X-Pleasant-OTP\" in token_json.headers and token_json.headers[\"X-Pleasant-OTP\"] == \"required\":\r\n            otp_provider = token_json.headers[\"X-Pleasant-OTP-Provider\"]\r\n\r\n            otp_token = show_prompt(\"Enter your OTP for MFA (\" + otp_provider + \"):\")\r\n\r\n            if not otp_token:\r\n                printError = partial(print, file=sys.stderr)    # python2 compatibility\r\n                printError(\"No token for MFA provided\")\r\n                return \"\"\r\n\r\n            otp_headers = {\r\n                \"X-Pleasant-OTP-Provider\": otp_provider,\r\n                \"X-Pleasant-OTP\": otp_token\r\n            }\r\n\r\n            token_json = call_token_endpoint(url, token_params, otp_headers)\r\n        else:\r\n            printError = partial(print, file=sys.stderr)    # python2 compatibility\r\n            printError(\"An unknown error occurred (could be redundant domain name, try to omit it).\")\r\n            return \"\"\r\n\r\n    token = json.loads(token_json.content)[\"access_token\"]\r\n\r\n    headers = {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": token\r\n    }\r\n\r\n    api_string = get_api_string(\"$CustomProperty.APIVersion$\")\r\n    \r\n    credential_password_json = requests.get(url + api_string + credential_id + \"/password\", headers=headers, verify=False)\r\n    credential_password = json.loads(credential_password_json.content)\r\n\r\n    credential = {\r\n        \"Password\": credential_password\r\n    }\r\n\r\n    credential_json = json.dumps(credential)\r\n\r\n    return credential_json\r\n\r\nif \"$CustomProperty.OmitDomain$\" is \"Yes\":\r\n    print(get_dynamic_credential(\"$CustomProperty.ServerURL$\", \"$$EffectiveUsernameWithoutDomain$$\", \"$EffectivePassword$\", \"$DynamicCredential.EffectiveID$\"))\r\nelse:\r\n    print(get_dynamic_credential(\"$CustomProperty.ServerURL$\", \"$EffectiveUsername$\", \"$EffectivePassword$\", \"$DynamicCredential.EffectiveID$\"))\r\n","Script":"from __future__ import print_function\r\nimport sys\r\nfrom functools import partial\r\nimport json\r\nimport requests\r\nimport urllib3\r\n\r\ntry:\r\n    # for Python2\r\n    from Tkinter import * \r\nexcept ImportError:\r\n    # for Python3\r\n    from tkinter import *\r\n\r\nclass TakeInput(object):\r\n    def __init__(self, request_message):\r\n        self.root = Tk()\r\n\r\n        self.root.title('')\r\n        self.string = ''\r\n\r\n        self.frame = Frame(self.root)\r\n        self.frame.pack()\r\n\r\n        self.acceptInput(request_message)\r\n\r\n    def acceptInput(self, request_message):\r\n        r = self.frame\r\n\r\n        k = Label(r, text=request_message)\r\n        k.pack(side='left')\r\n        self.e = Entry(r, text='Name')\r\n        self.e.pack(side='left')\r\n        self.e.focus_set()\r\n        b = Button(r, text='OK', command=self.gettext)\r\n        b.pack(side='right')\r\n\r\n    def gettext(self):\r\n        self.string = self.e.get()\r\n        self.root.destroy()\r\n\r\n    def getString(self):\r\n        return self.string\r\n\r\n    def waitForInput(self):\r\n        self.root.lift()\r\n        self.root.attributes('-topmost', True)\r\n        self.root.after_idle(self.root.attributes, '-topmost', False)\r\n\r\n        self.root.mainloop()\r\n\r\n\r\ndef show_prompt(request_message):\r\n    msg_box = TakeInput(request_message)\r\n\r\n    # loop until the user makes a decision and the window is destroyed\r\n\r\n    msg_box.waitForInput()\r\n\r\n    return msg_box.getString()\r\n\r\n\r\ndef convert_notes_to_html(notes):\r\n    if notes is None:\r\n        return \"\"\r\n    else:\r\n        return notes.replace(\"\\r\\n\", \"<br />\").replace(\"\\r\", \"<br />\").replace(\"\\n\", \"<br />\")\r\n\r\n\r\ndef create_credential(url, headers, credential):\r\n    credential_id = credential[\"Id\"]\r\n    credential_name = credential[\"Name\"]\r\n    credential_url = credential[\"Url\"]\r\n    credential_username = credential[\"Username\"]\r\n    credential_notes = convert_notes_to_html(credential[\"Notes\"])\r\n    credential_custom_properties = credential[\"CustomUserFields\"]\r\n    credential_color = \"\"\r\n\r\n    credential_custom_app_fields = credential.get(\"CustomApplicationFields\", None)\r\n\r\n    if credential_custom_app_fields is not None:\r\n        credential_color = credential_custom_app_fields.get(\"ForegroundColor\", \"\")\r\n\r\n    credential_description = \"\"\r\n\r\n    for tag in credential[\"Tags\"]:\r\n        tag_name = tag[\"Name\"]\r\n        credential_description += tag_name + \", \"\r\n\r\n    if credential_description.endswith(\", \"):\r\n        credential_description = credential_description[:len(credential_description) - 2]\r\n\r\n    credential = {\r\n        \"Type\": \"DynamicCredential\",\r\n        \"ID\": credential_id,\r\n        \"Name\": credential_name,\r\n        \"Color\": credential_color,\r\n        \"URL\": credential_url,\r\n        \"Username\": credential_username,\r\n        \"Notes\": credential_notes,\r\n        \"Description\": credential_description,\r\n        \"CustomProperties\": credential_custom_properties\r\n    }\r\n\r\n    return credential\r\n\r\n\r\ndef create_credential_group(url, headers, credential_group):\r\n    folder_id = credential_group[\"Id\"]\r\n    folder_name = credential_group[\"Name\"]\r\n    folder_notes = convert_notes_to_html(credential_group[\"Notes\"])\r\n\r\n    folder_objects = []\r\n\r\n    for sub_credential_group in credential_group[\"Children\"]:\r\n        folder_object = create_credential_group(url, headers, sub_credential_group)\r\n        folder_objects.append(folder_object)\r\n\r\n    for credential in credential_group[\"Credentials\"]:\r\n        credential_object = create_credential(url, headers, credential)\r\n        folder_objects.append(credential_object)\r\n\r\n    folder = {\r\n        \"Type\":     \"Folder\",\r\n        \"ID\":       folder_id,\r\n        \"Name\":     folder_name,\r\n        \"Notes\":    folder_notes,\r\n        \"Objects\":  folder_objects\r\n    }\r\n\r\n    # No need to create the root folder\r\n    if credential_group[\"ParentId\"] == \"00000000-0000-0000-0000-000000000000\" and folder_name == \"Root\":\r\n        return folder_objects\r\n\r\n    return folder\r\n\r\n\r\ndef call_token_endpoint(url, body, otp_headers):\r\n    token_json = requests.post(url + \"/OAuth2/Token\", data=body, verify=False, headers=otp_headers)\r\n\r\n    return token_json\r\n\r\ndef get_api_string(version):\r\n    api_string_list = {\r\n        \"4\": \"/api/v4/rest/credentialgroup/\",\r\n        \"5\": \"/api/v5/rest/folders/\"\r\n    }\r\n    api_string = api_string_list.get(version, \"/api/v5/rest/folders/\")\r\n\r\n    return api_string\r\n\r\ndef get_entries(url, username, password):\r\n    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\r\n\r\n    token_params = {\r\n        \"grant_type\": \"password\",\r\n        \"username\": username,\r\n        \"password\": password\r\n    }\r\n\r\n    token_json = call_token_endpoint(url, token_params, None)\r\n\r\n    if not token_json.ok:\r\n        if \"X-Pleasant-OTP\" in token_json.headers and token_json.headers[\"X-Pleasant-OTP\"] == \"required\":\r\n            otp_provider = token_json.headers[\"X-Pleasant-OTP-Provider\"]\r\n\r\n            otp_token = show_prompt(\"Enter your OTP for MFA (\" + otp_provider + \"):\")\r\n\r\n            if not otp_token:\r\n                printError = partial(print, file=sys.stderr)    # python2 compatibility\r\n                printError(\"No token for MFA provided\")\r\n                return \"\"\r\n\r\n            otp_headers = {\r\n                \"X-Pleasant-OTP-Provider\": otp_provider,\r\n                \"X-Pleasant-OTP\": otp_token\r\n            }\r\n\r\n            token_json = call_token_endpoint(url, token_params, otp_headers)\r\n        else:\r\n            printError = partial(print, file=sys.stderr)    # python2 compatibility\r\n            printError(\"An unknown error occurred (could be redundant domain name, try to omit it).\")\r\n            return \"\"\r\n\r\n    token = json.loads(token_json.content)[\"access_token\"]\r\n\r\n    headers = {\r\n        \"Accept\": \"application/json\",\r\n        \"Authorization\": token\r\n    }\r\n    \r\n    api_string = get_api_string(\"$CustomProperty.APIVersion$\")\r\n    \r\n    credential_groups_json = requests.get(url + api_string, headers=headers, verify=False)\r\n    credential_groups = json.loads(credential_groups_json.content)\r\n\r\n    store_objects = []\r\n\r\n    if credential_groups is not list:\r\n        credential_groups = [credential_groups]\r\n\r\n    for credentialGroup in credential_groups:\r\n        folder = create_credential_group(url, headers, credentialGroup)\r\n        store_objects.extend(folder)\r\n\r\n    store = {\r\n        \"Objects\": store_objects\r\n    }\r\n\r\n    store_json = json.dumps(store)\r\n\r\n    return store_json\r\n\r\nif \"$CustomProperty.OmitDomain$\" is \"Yes\":\r\n    print(get_entries(\"$CustomProperty.ServerURL$\", \"$EffectiveUsernameWithoutDomain$\", \"$EffectivePassword$\"))\r\nelse:\r\n    print(get_entries(\"$CustomProperty.ServerURL$\", \"$EffectiveUsername$\", \"$EffectivePassword$\"))\r\n"}]}
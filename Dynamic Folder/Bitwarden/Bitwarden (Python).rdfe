{
  "Name": "Dynamic Folder Export",
  "Objects": [
    {
      "Type": "DynamicFolder",
      "Name": "Bitwarden (Python)",
      "Notes": "<h2><strong>Bitwarden Dynamic Folder sample</strong></h2>\n\n<p><strong>Version</strong>: 1.0.2<br />\n<strong>Author</strong>: Royal Applications</p>\n\n<p>This Dynamic Folder sample allows you to import credentials from Bitwarden. The Bitwarden CLI client is required and the path where it is installed must be configured in the &quot;Custom Properties&quot; section. Also, your Bitwarden login details must be provided in the &quot;Credentials&quot; section.</p>\n\n<p>At the moment, all items are placed in the root folder. There is no support for custom folders at the moment. Bitwarden two-step login is supported, but only tested with the &quot;Authenticator App&quot; and &quot;Email&quot; providers.</p>\n\n<h3><strong>Requirements</strong></h3>\n\n<ul>\n\t<li><a href=\"https://help.bitwarden.com/article/cli\">Bitwarden command-line tool (CLI)</a></li>\n\t<li>Python Module: __future__</li>\n\t<li>Python Module: sys</li>\n\t<li>Python Module: functools</li>\n\t<li>Python Module: json</li>\n\t<li>Python Module:&nbsp;subprocess</li>\n\t<li>Python Module: tkinter</li>\n</ul>\n\n<h3><strong>Setup</strong></h3>\n\n<ul>\n\t<li>Specify the full, absolute path to the Bitwarden CLI tool in the &quot;Custom Properties&quot; section.</li>\n\t<li>Specify credentials for accessing your Bitwarden vault in the &quot;Credentials&quot; section.</li>\n</ul>\n",
      "CustomProperties": [
        {
          "Name": "Path To BW CLI",
          "Type": "Text",
          "Value": "/Applications/bw"
        }
      ],
      "ScriptInterpreter": "python",
      "DynamicCredentialScriptInterpreter": "json",
      "Script": "from __future__ import print_function\r\nimport sys\r\nfrom functools import partial\r\nimport json\r\nimport subprocess\r\n\r\ntry:\r\n    # for Python2\r\n    from Tkinter import * \r\nexcept ImportError:\r\n    # for Python3\r\n    from tkinter import *\r\n\r\nclass TakeInput(object):\r\n    def __init__(self, request_message):\r\n        self.root = Tk()\r\n\r\n        self.root.title('')\r\n        self.string = ''\r\n\r\n        self.frame = Frame(self.root)\r\n        self.frame.pack()\r\n\r\n        self.acceptInput(request_message)\r\n\r\n    def acceptInput(self, request_message):\r\n        r = self.frame\r\n\r\n        k = Label(r, text=request_message)\r\n        k.pack(side='left')\r\n        self.e = Entry(r, text='Name')\r\n        self.e.pack(side='left')\r\n        self.e.focus_set()\r\n        b = Button(r, text='OK', command=self.gettext)\r\n        b.pack(side='right')\r\n\r\n    def gettext(self):\r\n        self.string = self.e.get()\r\n        self.root.destroy()\r\n\r\n    def getString(self):\r\n        return self.string\r\n\r\n    def waitForInput(self):\r\n        self.root.lift()\r\n        self.root.attributes('-topmost', True)\r\n        self.root.after_idle(self.root.attributes, '-topmost', False)\r\n\r\n        self.root.mainloop()\r\n\r\n\r\ndef show_prompt(request_message):\r\n    msg_box = TakeInput(request_message)\r\n\r\n    # loop until the user makes a decision and the window is destroyed\r\n\r\n    msg_box.waitForInput()\r\n\r\n    return msg_box.getString()\r\n\r\n\r\ndef convert_notes_to_html(notes):\r\n    if notes is None:\r\n        return \"\"\r\n    else:\r\n        return notes.replace(\"\\r\\n\", \"<br />\").replace(\"\\r\", \"<br />\").replace(\"\\n\", \"<br />\")\r\n\r\n\r\ndef create_credential(item):\r\n\titem_id = item[\"id\"]\r\n\titem_type = item[\"type\"]\r\n\titem_name = item[\"name\"]\r\n\titem_notes = convert_notes_to_html(item.get(\"notes\", \"\"))\r\n\titem_favorite = item.get(\"favorite\", False)\r\n\r\n\titem_login = item.get(\"login\", None)\r\n\r\n\titem_username = \"\"\r\n\titem_password = \"\"\r\n\titem_url = \"\"\r\n\r\n\tif item_login is not None:\r\n\t\titem_username = item_login.get(\"username\", \"\")\r\n\t\titem_password = item_login.get(\"password\", \"\")\r\n\r\n\t\titem_uris = item_login.get(\"uris\", None)\r\n\r\n\t\tif item_uris is not None:\r\n\t\t\tfor item_uri in item_login.get(\"uris\", None):\r\n\t\t\t\titem_url = item_uri.get(\"uri\", \"\")\r\n\t\r\n\titem_fields = item.get(\"fields\", None)\r\n\r\n\titem_custom_properties = [ ]\r\n\r\n\tif item_type == 3: # Card\r\n\t\titem_card = item.get(\"card\", None)\r\n\r\n\t\tif item_card is not None:\r\n\t\t\tcard_brand = item_card.get(\"brand\", \"Credit Card\")\r\n\t\t\tcard_cardholdername = item_card.get(\"cardholderName\", None)\r\n\t\t\tcard_code = item_card.get(\"code\", None)\r\n\t\t\tcard_expiration_month = item_card.get(\"expMonth\", None)\r\n\t\t\tcard_expiration_year = item_card.get(\"expYear\", None)\r\n\t\t\tcard_number = item_card.get(\"number\", None)\r\n\r\n\t\t\titem_custom_properties.append({\r\n\t\t\t\t\"Type\": \"Header\",\r\n\t\t\t\t\"Name\": card_brand\r\n\t\t\t})\r\n\r\n\t\t\tif card_cardholdername is not None:\r\n\t\t\t\titem_custom_properties.append({\r\n\t\t\t\t\t\"Type\": \"Text\",\r\n\t\t\t\t\t\"Name\": \"Cardholder\",\r\n\t\t\t\t\t\"Value\": card_cardholdername\r\n\t\t\t\t})\r\n\r\n\t\t\tif card_number is not None:\r\n\t\t\t\titem_custom_properties.append({\r\n\t\t\t\t\t\"Type\": \"Text\",\r\n\t\t\t\t\t\"Name\": \"Card Number\",\r\n\t\t\t\t\t\"Value\": card_number\r\n\t\t\t\t})\r\n\r\n\t\t\tif card_expiration_month is not None:\r\n\t\t\t\titem_custom_properties.append({\r\n\t\t\t\t\t\"Type\": \"Text\",\r\n\t\t\t\t\t\"Name\": \"Expiration Month\",\r\n\t\t\t\t\t\"Value\": card_expiration_month\r\n\t\t\t\t})\r\n\r\n\t\t\tif card_expiration_year is not None:\r\n\t\t\t\titem_custom_properties.append({\r\n\t\t\t\t\t\"Type\": \"Text\",\r\n\t\t\t\t\t\"Name\": \"Expiration Year\",\r\n\t\t\t\t\t\"Value\": card_expiration_year\r\n\t\t\t\t})\r\n\r\n\t\t\tif card_code is not None:\r\n\t\t\t\titem_custom_properties.append({\r\n\t\t\t\t\t\"Type\": \"Protected\",\r\n\t\t\t\t\t\"Name\": \"Security Code\",\r\n\t\t\t\t\t\"Value\": card_code\r\n\t\t\t\t})\r\n\r\n\r\n\tif item_fields is not None:\r\n\t\tfor item_field in item_fields:\r\n\t\t\titem_field_type = item_field[\"type\"]\r\n\t\t\titem_field_name = item_field.get(\"name\", \"\")\r\n\t\t\titem_field_value = item_field.get(\"value\", \"\")\r\n\r\n\t\t\tcustom_property_type = \"Text\"\r\n\r\n\t\t\tif item_field_type == 1:\r\n\t\t\t\tcustom_property_type = \"Protected\"\r\n\t\t\telif item_field_type == 2:\r\n\t\t\t\tcustom_property_type = \"YesNo\"\r\n\t\t\t\titem_field_value = bool(item_field_value)\r\n\r\n\t\t\tcustom_property = {\r\n\t\t\t\t\"Type\": custom_property_type,\r\n\t\t\t\t\"Name\": item_field_name,\r\n\t\t\t\t\"Value\": item_field_value\r\n\t\t\t}\r\n\r\n\t\t\titem_custom_properties.append(custom_property)\r\n\r\n\r\n\tcredential = {\r\n        \"Type\": \"Credential\",\r\n        \"ID\": item_id,\r\n        \"Name\": item_name,\r\n        \"Notes\": item_notes,\r\n\t\t\"Favorite\": item_favorite,\r\n\t\t\"Username\": item_username,\r\n\t\t\"Password\": item_password,\r\n\t\t\"URL\": item_url,\r\n\t\t\"CustomProperties\": item_custom_properties\r\n    }\r\n\t\r\n\treturn credential\r\n\r\n\r\ndef logout(bw_path):\r\n\tcmd_logout = [ bw_path, \"logout\" ]\r\n\tbw = subprocess.Popen(cmd_logout, stdout=subprocess.PIPE)\r\n\tbw.wait()\r\n\r\n\r\ndef get_entries(bw_path, username, password):\r\n\tprintError = partial(print, file=sys.stderr) # python2 compatibility\r\n\r\n\tlogout(bw_path)\r\n\r\n\tcmd_login = [ bw_path, \"login\", username, password, \"--raw\" ]\r\n\t\r\n\tbw = subprocess.Popen(cmd_login, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE)\r\n\r\n\tout_buffer = \"\"\r\n\r\n\tsend_two_step_code = False\r\n\tmultiple_two_step_methods = False\r\n\r\n\twhile True:\r\n\t\tout = bw.stdout.read(1)\r\n\r\n\t\tout_buffer += out.decode(\"utf-8\")\r\n\r\n\t\tif not send_two_step_code:\r\n\t\t\tif out_buffer == '? Two-step login code:':\r\n\t\t\t\tsend_two_step_code = True\r\n\r\n\t\t\t\tsys.stdout.flush()\r\n\r\n\t\t\t\tmfa_code = show_prompt(\"Please enter your two-step login code:\")\r\n\t\t\t\tbw.stdin.write((mfa_code + \"\\n\").encode(\"utf-8\"))\r\n\r\n\t\t\t\tbreak\r\n\t\t\telif out_buffer == '? Two-step login method:':\r\n\t\t\t\tmultiple_two_step_methods = True\r\n\r\n\t\t\t\tsys.stdout.flush()\r\n\r\n\t\t\t\tbreak\r\n    \t\r\n\t\tif out == \"\" and bw.poll() is not None:\r\n\t\t\tbreak\r\n\r\n\tif multiple_two_step_methods:\r\n\t\tprintError(\"Login failed. Multiple two-step login methods are enabled. This script only supports a single two-step login method.\")\r\n\r\n\t\tsys.exit(1)\r\n\r\n\t(session_key, err) = bw.communicate()\r\n\r\n\tif send_two_step_code:\r\n\t\tsession_key = session_key.decode(\"utf-8\")\r\n\telse:\r\n\t\tsession_key = out_buffer\r\n\r\n\tout_buffer_split = session_key.split(\"\\n\")\r\n\r\n\tif out_buffer_split is not None and len(out_buffer_split) >= 1:\r\n\t\tout_buffer_split = list(filter(None, out_buffer_split))\r\n\r\n\t\tlast_line = out_buffer_split[len(out_buffer_split) - 1]\r\n\r\n\t\tsession_key = last_line\r\n\r\n\texit_code = bw.wait()\r\n\r\n\tif exit_code != 0:\r\n\t\tprintError(\"Login failed, please verify your credentials.\")\r\n\r\n\t\tsys.exit(1)\r\n\r\n\tcmd_sync = [ bw_path, \"sync\" ]\r\n\r\n\tbw = subprocess.Popen(cmd_sync, stdout=subprocess.PIPE)\r\n\tbw.wait()\r\n\r\n\tcmd_list_items = [ bw_path, \"list\", \"items\", \"--session\", session_key ]\r\n\r\n\tbw = subprocess.Popen(cmd_list_items, stdout=subprocess.PIPE)\r\n\t(list_items_json, err) = bw.communicate()\r\n\texit_code = bw.wait()\r\n\r\n\tif exit_code != 0:\r\n\t\tprintError(\"Listing items failed.\")\r\n\r\n\t\tsys.exit(1)\r\n\r\n\tlist_items_response = json.loads(list_items_json)\r\n\r\n\tstore_objects = []\r\n\r\n\tfor item in list_items_response:\r\n\t\tcred = create_credential(item)\r\n\r\n\t\tstore_objects.append(cred)\r\n\r\n\tstore = {\r\n        \"Objects\": store_objects\r\n    }\r\n\t\r\n\tstore_json = json.dumps(store)\r\n\t\r\n\treturn store_json\n\nbw_path = r\"$CustomProperty.PathToBWCLI$\"\n\nprint(get_entries(bw_path, r\"$EffectiveUsername$\", r\"$EffectivePassword$\"))\nlogout(bw_path)"
    }
  ]
}
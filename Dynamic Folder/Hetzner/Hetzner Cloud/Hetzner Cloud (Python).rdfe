{"Name":"Dynamic Folder Export","Objects":[{"Type":"DynamicFolder","Name":"Hetzner Cloud (Python)","Notes":"<h2 class=\"cs2654AE3A\">\r\n\t\t\t<span class=\"cs2F2A7C7\">Dynamic Folder support for Hetzner Cloud</span></h2>\r\n\t\t<p class=\"csAD7A2888\"><span class=\"cs4306042E\">Version</span><span class=\"csC8F6D76\">: 1.0<br/></span><span class=\"cs4306042E\">Author</span><span class=\"csC8F6D76\">: Max Schmitt</span></p><p class=\"csAD7A2888\"><span class=\"csC8F6D76\">This Dynamic Folder script will list all your servers for the given API Key of the Hetzner Cloud.</span></p><p class=\"csAD7A2888\"><span class=\"cs5DBD961F\">Prerequisites</span></p><ul style=\"margin-top:0;margin-bottom:0;\">\r\n\t\t\t<li class=\"cs15B7AE4B\"><span class=\"csC8F6D76\"><a class=\"cs26DADAAD\" href=\"https://github.com/hetznercloud/cli\"><span class=\"csCCA9035D\">Hetzner Cloud Command Line Interface</span></a></span><span class=\"csC8F6D76\"> (CLI) needs to be installed, so it&#39;s binary is available in the PATH environment variable.</span></li></ul>\r\n\t\t<h3 class=\"cs2654AE3A\">\r\n\t\t\t<span class=\"cs5DBD961F\">Setup</span></h3>\r\n\t\t<ul style=\"margin-top:0;margin-bottom:0;\">\r\n\t\t\t<li class=\"cs15B7AE4B\"><span class=\"csC8F6D76\">Enter your API Key, which you&#39;ve got from the Hetzner Cloud Console and place it under the Custom Fields =&gt; Protected section of the Dynamic Folder. There&#39;s a &quot;Custom Field 11&quot;, which is used to store the API Key.</span></li></ul>\r\n\t\t<h3 class=\"cs2654AE3A\">\r\n\t\t\t<span class=\"cs5DBD961F\">Notes</span></h3>\r\n\t\t<ul style=\"margin-top:0;margin-bottom:0;\">\r\n\t\t\t<li class=\"cs15B7AE4B\"><span class=\"csC8F6D76\">Per default the auto created servers are setup to inherit their credentials from the Dynamic Folder. So if you set their the credentials all underlying servers will use them.</span></li></ul>\r\n\t","ScriptInterpreter":"python","DynamicCredentialScriptInterpreter":"json","Script":"import subprocess\r\nimport json\r\nimport os\r\nimport re\r\nimport sys\r\n\r\n# log_error will write the error to the stderr, so that Royal TS will display it.\r\n\r\n\r\ndef log_error(err):\r\n    print(\"error: {}\".format(err.strip()), file=sys.stderr)\r\n    exit(1)\r\n\r\n\r\ndef get_instances(api_key):\r\n    os.environ[\"HCLOUD_TOKEN\"] = api_key\r\n    cmd = \"hcloud\"\r\n    store = {\r\n        \"Objects\": []\r\n    }\r\n    # get servers\r\n    server_list_process = subprocess.Popen(\r\n        \"{} server list -o columns=id,name,ipv4 -o noheader\".format(cmd), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\r\n    (stdout, stderr) = server_list_process.communicate()\r\n    exit_code = server_list_process.wait()\r\n    # check if hcloud returned a successful status code != 0\r\n    if exit_code != 0:\r\n        log_error(\"could not get server list: {}\".format(stderr.decode()))\r\n    # loop over the returned servers and build the royal ts JSON\r\n    for line in stdout.decode().strip().splitlines():\r\n        values = re.findall(r\"[^ ]+\", line)\r\n        store[\"Objects\"].append({\r\n            \"ID\": values[0],\r\n            \"Name\": values[1],\r\n            \"ComputerName\": values[2],\r\n            \"Username\": \"root\",\r\n            \"Type\": \"TerminalConnection\",\r\n            \"TerminalConnectionType\": \"SSH\",\r\n            \"CredentialsFromParent\": True\r\n        })\r\n    return json.dumps(store)\r\n\r\n\r\nprint(get_instances(\"$CustomField11$\"))\r\n"}]}
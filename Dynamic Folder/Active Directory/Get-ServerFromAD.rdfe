{"Name":"Dynamic Folder Export","Objects":[{"Type":"DynamicFolder","Name":"Active Directory","ScriptInterpreter":"powershell","DynamicCredentialScriptInterpreter":"json","Script":"$ADDomainController = 'contoso.com'\n$InactiveComputerObjectThresholdInDays = '14'\n$RDPCredentialName = 'CONTOSO\\adminuser'\n$ADCredentialPath = \"$env:USERPROFILE\\AD.cred.xml\"\nfunction Get-ServerFromAD {\n    <#\n      .SYNOPSIS\n      Get-ServerFromAD is a command to retrieve server information from Active Directory.\n      .DESCRIPTION\n      Get-ServerFromAD is a command to retrieve server information from Active Directory.\n\n      You need to install Remote Server Administration Tools (RSAT) in order to leverage the Active Directory module for PowerShell from a workstation. Starting with Windows 10 October 2018 Update, RSAT is included as a set of \"Features on Demand\" in Windows 10 itself. From PowerShell, it can be installed using this command:\n      Add-WindowsCapability -Online -Name Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0\n\n\n           Required version: Windows PowerShell 3.0 or later \n           Required modules: ActiveDirectory\n           Required privileges: Read-permission in AD\n\n      .EXAMPLE\n      Get-ServerFromAD\n      .EXAMPLE\n      Export data to Excel (requires the ImportExcel module)\n      $XlsxPath = 'C:\\temp\\Servers_AD_InventoryReport.xlsx'\n      Get-ServerFromAD | \n      Export-Excel -Path $XlsxPath -WorkSheetname Servers -AutoSize -TableName Servers -TableStyle Light1\n  #>\n\n    [CmdletBinding()]\n    Param(\n        [string]$InactiveComputerObjectThresholdInDays = 30,\n        [string]$RootOUPath,\n        [string]$ADDomainController,\n        [pscredential]$ADCredential\n    )\n\n    try {\n        \n        Import-Module -Name ActiveDirectory -ErrorAction Stop -WarningAction SilentlyContinue\n        \n    } catch {\n        \n        Write-Error -Message 'Prerequisites missing (ActiveDirectory module not installed)'\n        break\n        \n    }\n\n    $Parameters = @{}\n\n    $null = $Parameters.Add('LDAPFilter', \"(&(objectCategory=computer)(operatingSystem=Windows Server*)(!serviceprincipalname=*MSClusterVirtualServer*))\")\n\n    $ADProperty = 'name', 'operatingSystem', 'lastlogondate', 'description', 'DistinguishedName', 'CanonicalName'\n    $null = $Parameters.Add('Properties', $ADProperty)\n\n    if ($ADCredential) {\n\n        $null = $Parameters.Add('Credential', $ADCredential)\n\n    }\n\n    if ($RootOUPath) {\n\n        $null = $Parameters.Add('SearchBase', $RootOUPath)\n\n    }\n\n    if ($ADDomainController) {\n\n        $null = $Parameters.Add('Server', $ADDomainController)\n\n    }\n\n    Get-ADComputer @Parameters |\n        Where-Object lastlogondate -gt (Get-Date).AddDays( - $InactiveComputerObjectThresholdInDays) |  \n        Select-Object -Property $ADProperty |\n        Sort-Object -Property name\n        \n} #endfunction\n\n\nif (Test-Path -Path $ADCredentialPath) {\n\n    $ADCredential = Import-Clixml -Path $ADCredentialPath\n\n} else {\n\n    $ADCredential = Get-Credential -Message 'Specify AD credentials'\n    $ADCredential | Export-Clixml -Path $ADCredentialPath\n\n}\n\n[System.Collections.ArrayList]$Servers = @()\n\nGet-ServerFromAD -InactiveComputerObjectThresholdInDays $InactiveComputerObjectThresholdInDays -ADDomainController $ADDomainController -ADCredential $ADCredential | ForEach-Object {\n\n    if ($PSItem.Description) {\n\n        $Description = ($PSItem.operatingSystem + ' (' + $PSItem.Description + ')')\n\n    } else {\n\n        $Description = $PSItem.operatingSystem\n\n    }\n    $null = $Servers.Add([PSCustomObject]@{\n        Name = $PSItem.Name\n        Type = 'RemoteDesktopConnection'\n        ComputerName = $PSItem.Name\n        CredentialName = $RDPCredentialName\n        Path = $PSItem.CanonicalName.Replace(\"/$($PSItem.Name)\",'')\n        Description = $Description\n    })\n\n} \n\n$RoyalTSObjects = @{}\n$null = $RoyalTSObjects.Add('Objects',$Servers)\n\n\n$RoyalTSObjects | ConvertTo-Json"}]}
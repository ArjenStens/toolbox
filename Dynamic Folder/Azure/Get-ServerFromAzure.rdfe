{"Name":"Dynamic Folder Export","Objects":[{"Type":"DynamicFolder","Name":"Azure","ScriptInterpreter":"powershell","DynamicCredentialScriptInterpreter":"json","Script":"$AzCredentialPath = \"$env:USERPROFILE\\Azure.cred.xml\"\n$AzSubscriptionId = 'xxxx-xxxx-xxxx'\n\n$RDPCredentialName = 'CONTOSO\\adminuser'\n$SSHCredentialName = 'SSHUser'\n\nif (Get-Module -Name Az.Compute -ListAvailable) {\n\n\n    function Get-ServerFromAzure {\n        <#\n      .SYNOPSIS\n      Get-ServerFromAzure is a command to retrieve server information from Microsoft Azure.\n      .DESCRIPTION\n      Get-ServerFromAzure is a command to retrieve server information from Microsoft Azure.\n\n           Required version: Windows PowerShell 3.0 or later \n           Required modules: Az\n           Required privileges: Read-permission in Azure\n\n      .EXAMPLE\n      Get-ServerFromAzure -SubscriptionId 'c0fda861-649f-49ee-9ede-fa1908101500' -Credential (Get-Credential)\n\n  #>\n  \n        [CmdletBinding()]\n        Param(\n            [PSCredential]$Credential = (Get-Credential),\n            [string]$SubscriptionId\n        )\n\n        try {\n        \n            Import-Module -Name Az.Compute -ErrorAction Stop -Verbose:$false\n        \n        }    \n\n        catch {\n        \n            Write-Error -Message 'Prerequisites missing (Az PowerShell module not installed)'\n            break\n        \n        }\n        \n        try {\n        \n            $null = Get-AzSubscription -ErrorAction Stop\n        \n        }\n        \n        catch {\n        \n            try {\n                $null = Connect-AzAccount -Credential $Credential -ErrorAction Stop\n        \n            }\n                \n            catch {\n        \n                Write-Error -Message 'Azure Resource Manager authentication failed'\n                break\n        \n            }\n        \n        }\n\n        if (-not ((Get-AzContext).Subscription.Id -eq $SubscriptionId)) {\n\n            $null = Set-AzContext -SubscriptionId $SubscriptionId\n\n        }\n  \n        $AllNICs = Get-AzNetworkInterface\n    \n        Get-AzVM | Select-Object  Name, @{n = 'IpAddress'; e = {($AllNICs | Where-Object id -eq $_.NetworkProfile.NetworkInterfaces[0].Id).IpConfigurations[0].PrivateIpAddress}}, @{Name = 'OSType'; e = {if ($_.OSProfile.WindowsConfiguration) {'Windows'} else {'Linux'}}}\n      \n    }\n\n\n    if (Test-Path -Path $AzCredentialPath) {\n\n        $ADCredential = Import-Clixml -Path $AzCredentialPath\n\n    } else {\n\n        $AzCredential = Get-Credential -Message 'Specify Azure credentials'\n        $AzCredential | Export-Clixml -Path $AzCredentialPath\n\n    }\n\n    [System.Collections.ArrayList]$Servers = @()\n\n    Get-ServerFromAzure -SubscriptionId $AzSubscriptionId -Credential $AzCredential | Sort-Object -Property Name | ForEach-Object {\n    \n        $Server = $PSItem\n\n        switch -Wildcard ($PSItem.OSType) {\n            \"*Linux*\" {\n        \n                $null = $Servers.Add([PSCustomObject]@{\n                        Name                   = $Server.Name\n                        Type                   = 'TerminalConnection'\n                        TerminalConnectionType = 'SSH'\n                        ComputerName           = $Server.IpAddress\n                        CredentialName         = $SSHCredentialName\n                        Path                   = 'Linux'\n                        #Description = $Description\n                    })\n            }\n    \n            \"*Windows*\" {\n        \n                $null = $Servers.Add([PSCustomObject]@{\n                        Name           = $Server.Name\n                        Type           = 'RemoteDesktopConnection'\n                        ComputerName   = $Server.IpAddress\n                        CredentialName = $RDPCredentialName\n                        Path           = 'Windows'\n                        #Description = $Description\n                    })\n        \n            }\n    \n            Default {\n        \n                $null = $Servers.Add([PSCustomObject]@{\n                        Name         = $Server.Name\n                        Type         = 'RemoteDesktopConnection'\n                        ComputerName = $Server.IpAddress\n                        Path         = 'Other'\n                        #Description = $Description\n                    })\n        \n            }\n    \n        }\n\n    } \n\n    $RoyalTSObjects = @{}\n    $null = $RoyalTSObjects.Add('Objects', $Servers)\n\n\n    $RoyalTSObjects | ConvertTo-Json\n\n\n}"}]}